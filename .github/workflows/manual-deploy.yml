name: Manual Deploy with No Cache Build

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "deploy"
        type: choice
        options:
          - deploy
      confirm_deploy:
        description: 'Type "deploy" to confirm deployment'
        required: true
        type: string

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate deployment confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_deploy }}" != "deploy" ]; then
            echo "❌ Deployment cancelled. Please type 'deploy' to confirm."
            exit 1
          fi
          echo "✅ Deployment confirmed"

  manual-deploy:
    needs: validate-inputs
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Deploy with no-cache build
        uses: appleboy/ssh-action@v1.2.0
        env:
          DATABASE_URL: ${{ vars.DATABASE_URL }}
          NEXT_PUBLIC_AMPLITUDE_API_KEY: ${{ vars.NEXT_PUBLIC_AMPLITUDE_API_KEY }}
          NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          AUTH_GOOGLE_ID: ${{ secrets.AUTH_GOOGLE_ID }}
          AUTH_GOOGLE_SECRET: ${{ secrets.AUTH_GOOGLE_SECRET }}
          GOOGLE_SEARCH_API_KEY: ${{ secrets.GOOGLE_SEARCH_API_KEY }}
          GOOGLE_SEARCH_CX: ${{ secrets.GOOGLE_SEARCH_CX }}
          GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
        with:
          envs: DATABASE_URL,NEXT_PUBLIC_AMPLITUDE_API_KEY,NEXTAUTH_URL,AUTH_SECRET,AUTH_GOOGLE_ID,AUTH_GOOGLE_SECRET,GOOGLE_SEARCH_API_KEY,GOOGLE_SEARCH_CX,GOOGLE_AI_API_KEY
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            trap 'echo "❌ Deploy failed at line $LINENO"' ERR

            echo "🚀 Starting manual deployment with no-cache build..."

            # Add GitHub to known hosts
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts

            # Repository setup
            REPO_DIR=~/${{ github.event.repository.name }}
            echo "📁 Setting up repository directory: $REPO_DIR"

            # Clone if directory doesn't exist, otherwise update
            if [ ! -d "$REPO_DIR/.git" ]; then
              echo "📥 Cloning repository..."
              git clone --depth 1 https://github.com/${{ github.repository }}.git "$REPO_DIR"
            else
              echo "🔄 Updating existing repository..."
            fi

            cd "$REPO_DIR"

            # Fetch latest changes
            echo "🔍 Fetching latest changes from main branch..."
            git fetch --prune --depth=1 origin main
            git reset --hard origin/main

            # Stop existing containers
            echo "🛑 Stopping existing containers..."
            docker compose -f compose.prod.yaml down || true

            # Build with no-cache and pull latest images
            echo "🏗️  Building with --no-cache (this may take longer)..."
            docker compose -f compose.prod.yaml build --no-cache --pull

            # Start services
            echo "▶️  Starting services..."
            docker compose -f compose.prod.yaml up -d --remove-orphans

            # Clean up unused images to save space
            echo "🧹 Cleaning up unused Docker images..."
            docker image prune -f

            echo "✅ Manual deployment completed successfully!"
            echo "🌐 Application should be available at your configured URL"
